# 技术栈
这是一个基于 Vite 前端框架和 Express 后端框架构建的 Web 应用程序，支持多语言博客功能，使用以下核心技术：
•	前端：
	•	Vite：构建和导航工具。
	•	React（Next.js 替换为 Vite + React 框架）：前端开发框架。
	•	Tailwind CSS：实现 CSS-in-JS 样式设计。
•	后端：
	•	Express：后端框架，用于构建 API 服务。
	•	MySQL：关系型数据库。
# 编码标准
通用编码标准
1.	代码风格：
	•	仅使用函数式组件，结合 React Hooks，避免类组件。
	•	变量声明优先使用 const，仅在需要可变变量时使用 let。
	•	使用 camelCase 规范命名变量和函数，组件命名使用 PascalCase（首字母大写）。
2.	文件组织：
	•	文件夹和文件命名：
	    •	统一使用小写短横线命名，例如：components/blog-card。
	•	文件结构：
	    •	src/components/：存放可复用的 UI 组件。
	    •	src/[locale]/：支持多语言的前端页面。
	    •	data/blog/：多语言的博客数据文件。
	    •	backend/：后端 API 服务函数。

前端编码标准
	1.	使用 React.memo 包裹纯函数组件，提升性能。
	2.	路由组件和非核心模块需实现懒加载。
	3.	在组件中使用 PropTypes 验证输入参数类型，确保健壮性。
	4.	优化 useEffect 依赖数组，避免不必要的重新渲染。

后端编码标准
	1.	使用中间件管理路由逻辑，确保代码清晰可扩展。
	2.	数据库查询使用异步函数，并结合 try/catch 块进行错误处理。
	3.	定义统一的错误响应格式，便于前后端协作。

# 性能优化指南
1.	前端优化：
	•	使用 React.memo 包裹高频渲染的组件，减少重复渲染。
	•	图像优化：使用 WebP 格式，启用懒加载，并包含尺寸信息。
	•	动态加载非核心组件，减少初始加载时间。
2.	后端优化：
	•	使用 MySQL 索引优化查询性能，避免全表扫描。
	•	对静态资源实现 CDN 加速或缓存策略。
	•	合理利用缓存工具（如 Redis）存储频繁读取的数据。
3.	构建优化：
	•	前端使用 Vite 进行代码分割（code splitting），生成更小的 bundle。
	•	在生产环境启用 Gzip 或 Brotli 压缩。
	•	后端 API 使用分页与批量查询技术，避免单次大量数据传输。

# 测试要求
1.	使用 Jest 和 React Testing Library 编写单元测试，覆盖核心业务逻辑和组件。
2.	测试覆盖率要求：
	•	单元测试和集成测试覆盖率需达到 80% 以上。
	•	对关键组件和页面实现快照测试（Snapshot Testing）。
3.	后端使用 Supertest 测试 API 接口，确保返回结果正确。

# 文档规范
1.	注释要求：
	•	所有函数和组件需使用 JSDoc 格式编写注释，清晰说明用途和参数。
2.	README 文件：
	•	每个主要目录需包含 README.md 文件，说明文件结构和用法。
	•	README 文件需提供 英文 和 中文 两个版本，便于国际化开发。

# 错误处理
1.	前端错误处理：
	•	使用全局错误边界组件捕获 React 异常，并展示友好提示。
	•	捕获 API 请求错误，并结合国际化显示错误信息。
2.	后端错误处理：
	•	异步操作中使用 try/catch 块捕获错误，并记录详细的错误日志。
	•	定义统一的错误响应格式